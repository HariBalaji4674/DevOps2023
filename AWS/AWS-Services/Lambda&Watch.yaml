Lambda Function:
Solving the below problems
  Compute
  ServerLess

Event Driven Actions

Cloud Watch Event --> Trigger Event --> In lamdba Function --> Integrate with SNS/SQS --> Email
#

import json

def lambdahandler(event,context)

return
{
  'statusCode': 200
  'body' : json.dumps("Hello Lambda Functions")
}

#

Lambda Function : will also give compute
It is server less and can execute the application
it will run automatically with out making the compute services visible to the user

Cost Optimization/Estimation :
  ServerLess --> Cost Optimization
  Security --> Very Important in public cloud
  Compliance --> how secure the application .

Cloud Cost Optimization:
If You are not managing the cloud cost doing efficiently

Lambda Function --> EBS Volume SnapShots

Write a lambda Function (Python Code)
This will talk to the AWS API
Fetch all the EBS Snapshots
Filter out SnapShots

What is SnapShots:
  EBS Snapshots are a point-in-time copy of your data, and can be used to enable disaster recovery, migrate data across regions and accounts, and improve backup compliance. You can create and manage your EBS Snapshots through the AWS Management Console, AWS Command Line Interface (CLI), or the AWS SDKs.

Cloud Watch :
  Fundamentals
  Metrics
  Alerts
  Custom Metrics

Demo:
  Metrics (default)
  Custom Metrics

What is Cloud Watch:
  Cloud : Resource Creator
  Watch : Gate Keeper
  Cloud watch is a person can see all details about cloud in cloud watch

A Gate keeper for my aws account which can support below things
  1: Monitoring (***)
  2: Alerting
  3: Reporting
  4: Logging

Monitoring: Monitor the resources

Metrics: Get the real life metrics
a metrics is something that will help you to understand about utilization and usage of cpu.

  How much cpu is used
  How much memory is used
  How many api calls is received

Alerts:
  Based on the metrics we get, some notifications so that we need to take actions to get the metrics outcome

LogInsights:
  Storing all the activities about resource utilization

Custom Metrics:
  CPU Utilization, Memory Utilization by default cloud watch should not support tehre we need to integrate with cloud watch to monitor Memory also

Cost Optimization:
  Reducing the Cost on cloud services usage

Scaling:
  Increases The services based on the traffic/CPU Utilization.




# Docker
# Kubernetes
# Terraform
# Monitoring
# AWS
# Ansible
# CI/CD

